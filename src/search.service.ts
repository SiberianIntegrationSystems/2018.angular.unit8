import {Injectable} from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class SearchService {

  constructor() {
  }

  getResults(searchTerm: string): string[] {
    return dictionary.filter(value => value.startsWith(searchTerm));
  }


  getResultsAsync(searchTerm: string, callBack: Function): void {
    setTimeout(() => callBack(dictionary.filter(value => value.startsWith(searchTerm))), 2000 * Math.random());
  }
}

export const dictionary: string[] = [
  'animationFrame',
  'ArgumentOutOfRangeError',
  'asap',
  'async',
  'AsyncSubject',
  'BehaviorSubject',
  'bindCallback',
  'bindNodeCallback',
  'combineLatest',
  'CompletionObserver',
  'concat',
  'config',
  'ConnectableObservable',
  'defer',
  'EMPTY',
  'empty',
  'EmptyError',
  'ErrorObserver',
  'FactoryOrValue',
  'forkJoin',
  'from',
  'fromEvent',
  'fromEventPattern',
  'generate',
  'GroupedObservable',
  'identity',
  'iif',
  'InteropObservable',
  'interval',
  'isObservable',
  'merge',
  'MonoTypeOperatorFunction',
  'never',
  'NEVER',
  'NextObserver',
  'noop',
  'Notification',
  'ObjectUnsubscribedError',
  'observable',
  'Observable',
  'ObservableInput',
  'ObservableLike',
  'Observer',
  'of',
  'onErrorResumeNext',
  'Operator',
  'OperatorFunction',
  'pairs',
  'PartialObserver',
  'pipe',
  'queue',
  'race',
  'range',
  'ReplaySubject',
  'Scheduler',
  'SchedulerAction',
  'SchedulerLike',
  'Subject',
  'Subscribable',
  'SubscribableOrPromise',
  'Subscriber',
  'Subscription',
  'SubscriptionLike',
  'TeardownLogic',
  'throw',
  'TimeInterval',
  'TimeoutError',
  'timer',
  'Timestamp',
  'UnaryFunction',
  'Unsubscribable',
  'UnsubscriptionError',
  'using',
  'VirtualTimeScheduler',
  'zip',
  'audit',
  'auditTime',
  'buffer',
  'bufferCount',
  'bufferTime',
  'bufferToggle',
  'bufferWhen',
  'catchError',
  'combineAll',
  'combineLatest',
  'concat',
  'concatAll',
  'concatMap',
  'concatMapTo',
  'count',
  'debounce',
  'debounceTime',
  'defaultIfEmpty',
  'delay',
  'delayWhen',
  'dematerialize',
  'distinct',
  'distinctUntilChanged',
  'distinctUntilKeyChanged',
  'elementAt',
  'endWith',
  'every',
  'exhaust',
  'exhaustMap',
  'expand',
  'filter',
  'finalize',
  'find',
  'findIndex',
  'first',
  'flatMap',
  'groupBy',
  'ignoreElements',
  'isEmpty',
  'last',
  'map',
  'mapTo',
  'materialize',
  'max',
  'merge',
  'mergeAll',
  'mergeMap',
  'mergeMapTo',
  'mergeScan',
  'min',
  'multicast',
  'observeOn',
  'onErrorResumeNext',
  'pairwise',
  'partition',
  'pluck',
  'publish',
  'publishBehavior',
  'publishLast',
  'publishReplay',
  'race',
  'reduce',
  'refCount',
  'repeat',
  'repeatWhen',
  'retry',
  'retryWhen',
  'sample',
  'sampleTime',
  'scan',
  'sequenceEqual',
  'share',
  'shareReplay',
  'single',
  'skip',
  'skipLast',
  'skipUntil',
  'skipWhile',
  'startWith',
  'subscribeOn',
  'switchAll',
  'switchMap',
  'switchMapTo',
  'take',
  'takeLast',
  'takeUntil',
  'takeWhile',
  'tap',
  'throttle',
  'throttleTime',
  'throwIfEmpty',
  'timeInterval',
  'timeout',
  'timeoutWith',
  'timestamp',
  'toArray',
  'window',
  'windowCount',
  'windowTime',
  'windowToggle',
  'windowWhen',
  'withLatestFrom',
  'zipAll',
];


